// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (id, email, harshed_password)
VALUES ($1, $2, $3)
RETURNING id, email, harshed_password, password_changed_at, created_at, updated_at
`

type CreateAuthParams struct {
	ID              uuid.UUID `json:"id"`
	Email           string    `json:"email"`
	HarshedPassword string    `json:"harshed_password"`
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, createAuth, arg.ID, arg.Email, arg.HarshedPassword)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HarshedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuth = `-- name: GetAuth :one
SELECT id, email, harshed_password, password_changed_at, created_at, updated_at FROM auth
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAuth(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getAuth, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HarshedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuth = `-- name: UpdateAuth :one
UPDATE auth 
SET 
   email = COALESCE($1, email),
   harshed_password = COALESCE($2, harshed_password), 
   password_changed_at = COALESCE($3, password_changed_at),
   updated_at = COALESCE($4, updated_at)
WHERE id = $5
RETURNING id, email, harshed_password, password_changed_at, created_at, updated_at
`

type UpdateAuthParams struct {
	Email             sql.NullString `json:"email"`
	HarshedPassword   sql.NullString `json:"harshed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	ID                uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateAuth(ctx context.Context, arg UpdateAuthParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, updateAuth,
		arg.Email,
		arg.HarshedPassword,
		arg.PasswordChangedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HarshedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
